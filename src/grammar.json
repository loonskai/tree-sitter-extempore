{
  "$schema": "https://tree-sitter.github.io/tree-sitter/assets/schemas/grammar.schema.json",
  "name": "extempore",
  "rules": {
    "source_file": {
      "type": "REPEAT",
      "content": {
        "type": "SYMBOL",
        "name": "_form"
      }
    },
    "_form": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "list"
        },
        {
          "type": "SYMBOL",
          "name": "atom"
        },
        {
          "type": "SYMBOL",
          "name": "number"
        },
        {
          "type": "SYMBOL",
          "name": "string"
        },
        {
          "type": "SYMBOL",
          "name": "symbol"
        }
      ]
    },
    "comment": {
      "type": "TOKEN",
      "content": {
        "type": "SEQ",
        "members": [
          {
            "type": "STRING",
            "value": ";"
          },
          {
            "type": "PATTERN",
            "value": ".*"
          }
        ]
      }
    },
    "list": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "("
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "_form"
          }
        },
        {
          "type": "STRING",
          "value": ")"
        }
      ]
    },
    "atom": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "keyword"
        },
        {
          "type": "SYMBOL",
          "name": "type"
        },
        {
          "type": "SYMBOL",
          "name": "identifier"
        }
      ]
    },
    "keyword": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "alloc"
        },
        {
          "type": "STRING",
          "value": "zalloc"
        },
        {
          "type": "STRING",
          "value": "halloc"
        },
        {
          "type": "STRING",
          "value": "salloc"
        },
        {
          "type": "STRING",
          "value": "letz"
        },
        {
          "type": "STRING",
          "value": "beginz"
        },
        {
          "type": "STRING",
          "value": "vector"
        },
        {
          "type": "STRING",
          "value": "vector_ref"
        },
        {
          "type": "STRING",
          "value": "tuple"
        },
        {
          "type": "STRING",
          "value": "tuple_ref"
        },
        {
          "type": "STRING",
          "value": "array"
        },
        {
          "type": "STRING",
          "value": "array_ref"
        },
        {
          "type": "STRING",
          "value": "begin"
        },
        {
          "type": "STRING",
          "value": "cond"
        },
        {
          "type": "STRING",
          "value": "else"
        },
        {
          "type": "STRING",
          "value": "or"
        },
        {
          "type": "STRING",
          "value": "and"
        },
        {
          "type": "STRING",
          "value": "void"
        },
        {
          "type": "STRING",
          "value": "lambda"
        },
        {
          "type": "STRING",
          "value": "define"
        },
        {
          "type": "STRING",
          "value": "if"
        },
        {
          "type": "STRING",
          "value": "pref-ptr"
        },
        {
          "type": "STRING",
          "value": "aref-ptr"
        },
        {
          "type": "STRING",
          "value": "tref-ptr"
        },
        {
          "type": "STRING",
          "value": "pfill"
        },
        {
          "type": "STRING",
          "value": "tfill"
        },
        {
          "type": "STRING",
          "value": "aref"
        },
        {
          "type": "STRING",
          "value": "tref"
        },
        {
          "type": "STRING",
          "value": "pref"
        },
        {
          "type": "STRING",
          "value": "aset"
        },
        {
          "type": "STRING",
          "value": "tset"
        },
        {
          "type": "STRING",
          "value": "pset"
        },
        {
          "type": "STRING",
          "value": "set"
        },
        {
          "type": "STRING",
          "value": "while"
        },
        {
          "type": "STRING",
          "value": "dotimes"
        },
        {
          "type": "STRING",
          "value": "let"
        },
        {
          "type": "STRING",
          "value": "bind-func"
        },
        {
          "type": "STRING",
          "value": "bind-lib"
        },
        {
          "type": "STRING",
          "value": "bind-val"
        },
        {
          "type": "STRING",
          "value": "bind-type"
        },
        {
          "type": "STRING",
          "value": "*"
        },
        {
          "type": "STRING",
          "value": "+"
        },
        {
          "type": "STRING",
          "value": "-"
        },
        {
          "type": "STRING",
          "value": "/"
        },
        {
          "type": "STRING",
          "value": "="
        },
        {
          "type": "STRING",
          "value": "<"
        },
        {
          "type": "STRING",
          "value": ">"
        },
        {
          "type": "STRING",
          "value": "<="
        },
        {
          "type": "STRING",
          "value": ">="
        },
        {
          "type": "STRING",
          "value": "print"
        },
        {
          "type": "STRING",
          "value": "printf"
        },
        {
          "type": "STRING",
          "value": "i64tod"
        }
      ]
    },
    "type": {
      "type": "PATTERN",
      "value": ":[a-zA-Z][a-zA-Z0-9_]*"
    },
    "identifier": {
      "type": "PATTERN",
      "value": "[a-zA-Z_][a-zA-Z0-9\\-_]*"
    },
    "number": {
      "type": "PATTERN",
      "value": "[0-9]+(\\.[0-9]*)?([eE][+-]?[0-9]+)?"
    },
    "string": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "\""
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "CHOICE",
            "members": [
              {
                "type": "PATTERN",
                "value": "\\\\."
              },
              {
                "type": "PATTERN",
                "value": "[^\"\\\\]"
              }
            ]
          }
        },
        {
          "type": "STRING",
          "value": "\""
        }
      ]
    },
    "symbol": {
      "type": "PATTERN",
      "value": "'[^\\s()]*"
    }
  },
  "extras": [
    {
      "type": "PATTERN",
      "value": "\\s+"
    },
    {
      "type": "SYMBOL",
      "name": "comment"
    }
  ],
  "conflicts": [],
  "precedences": [],
  "externals": [],
  "inline": [],
  "supertypes": [],
  "reserved": {}
}